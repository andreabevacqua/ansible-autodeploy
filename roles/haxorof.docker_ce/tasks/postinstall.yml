---
- name: Reset internal variables for additional packages to be installed
  set_fact:
    _docker_additional_packages_os: []
    _docker_additional_packages_pip: []

- name: Set facts to install Docker SDK for Python
  set_fact:
    _docker_additional_packages_pip: "{{ _docker_additional_packages_pip + \
      docker_predefined_packages_pip[_docker_os_dist]['sdk'] }}"
  when:
    - docker_sdk | bool

- name: Set facts to install Docker Compose
  set_fact:
    _docker_additional_packages_pip: "{{ _docker_additional_packages_pip + \
      docker_predefined_packages_pip[_docker_os_dist]['compose'] }}"
  when:
    - docker_compose | bool and not docker_compose_no_pip | bool

- name: Set facts to install Docker Stack dependencies ('docker_stack')
  set_fact:
    _docker_additional_packages_pip: "{{ _docker_additional_packages_pip + \
      docker_predefined_packages_pip[_docker_os_dist]['stack'] }}"
  when:
    - docker_stack | bool

- name: Set facts with additional package to be installed
  set_fact:
    _docker_additional_packages_pip: "{{ _docker_additional_packages_pip + docker_additional_packages_pip }}"
    _docker_additional_packages_os: "{{ _docker_additional_packages_os + docker_additional_packages_os }}"

- name: Ensure required OS packages will be installed for PiP
  block:
    - name: Set fact for path test of pip/pip3
      set_fact:
        _docker_pip_or_pip3: "{{ _docker_python3 | ternary('pip3', 'pip') }}"

    - name: Determine if pip/pip3 exists in path
      become: true
      shell: type {{ _docker_pip_or_pip3 }}
      register: _docker_pip_cmd
      changed_when: false
      failed_when: false
      check_mode: no
      tags:
        - skip_ansible_lint

    - name: Set fact to install Python 2 PiP and build dependencies
      set_fact:
        _docker_additional_packages_os: >
          {{ _docker_additional_packages_os
            + ([] if (_docker_pip_cmd.rc == 0) else [docker_pip_package])
            + [docker_python2_build_os_pkgs[_docker_os_dist]] }}
      when:
        - not _docker_python3 | bool

    - name: Set fact to install Python 3 PiP and build dependencies
      set_fact:
        _docker_additional_packages_os: >
          {{ _docker_additional_packages_os
            + ([] if (_docker_pip_cmd.rc == 0) else [docker_pip3_package])
            + [docker_python3_build_os_pkgs[_docker_os_dist]] }}
      when:
        - _docker_python3 | bool

    - name: Ensure python-pip-whl is present (Debian 8)
      set_fact:
        _docker_additional_packages_os: "{{ _docker_additional_packages_os + ['python-pip-whl'] }}"
      when:
        - _docker_os_dist == "Debian"
        - _docker_os_dist_major_version | int == 8

    - name: Ensure python-backports.ssl-match-hostname is present (Debian 10)
      set_fact:
        _docker_additional_packages_os: "{{ _docker_additional_packages_os + ['python-backports.ssl-match-hostname'] }}"
      when:
        - not _docker_python3 | bool
        - _docker_os_dist == "Debian"
        - _docker_os_dist_major_version | int == 10

  when:
    - _docker_additional_packages_pip | length > 0

- name: Ensure EPEL release repository is installed
  become: true
  package:
    name: "epel-release"
    state: present
  register: _pkg_result
  until: _pkg_result is succeeded
  when:
    - docker_setup_repos | bool
    - _docker_os_dist == "CentOS"
    - _docker_additional_packages_os | length > 0

- name: Install additional packages (OS package manager)
  become: true
  package:
    name: "{{ item }}"
    state: present
  loop: "{{ _docker_additional_packages_os }}"
  register: _pkg_result
  until: _pkg_result is succeeded
  when: _docker_additional_packages_os | length > 0

# https://github.com/haxorof/ansible-role-docker-ce/issues/112
- name: Best effort workaround to avoid 'No module named zipp'
  block:
    - name: Fetch install PiP version
      become: "{{ docker_pip_sudo | bool }}"
      command: "{{ _docker_pip_or_pip3 }} --version"
      changed_when: no
      check_mode: no
      register: _pip_version

    - name: Set PiP to be upgraded due to too old PiP version (< 9.0.0)
      set_fact:
        docker_pip_upgrade: true
      when:
        - _pip_version is defined
        - _pip_version.stdout_lines[0] is defined
        - (_pip_version.stdout_lines[0] | regex_replace('^pip\s(\d+\.\d+\.\d+).+$', '\\1')) is version('9.0.0', '<')
  when:
    - _docker_additional_packages_pip | length > 0
    - docker_x_fix_no_zipp_module

- name: Upgrade/Reinstall PiP
  become: "{{ docker_pip_sudo | bool }}"
  pip:
    name: "{{ docker_pip_package_pip }}"
    state: forcereinstall
  register: _pkg_result
  until: _pkg_result is succeeded
  when:
    - _docker_additional_packages_pip | length > 0
    - docker_pip_upgrade | bool

- name: Install additional packages (PiP)
  become: "{{ docker_pip_sudo | bool }}"
  pip:
    name: "{{ item }}"
    state: present
    extra_args: "{{ docker_pip_extra_args }}"
  loop: "{{ _docker_additional_packages_pip }}"
  register: _pkg_result
  until: _pkg_result is succeeded
  when: _docker_additional_packages_pip | length > 0
  environment:
    HTTP_PROXY: "{{ http_proxy | default('') }}"
    HTTPS_PROXY: "{{ http_proxy | default('') }}"
    PYTHONWARNINGS: ignore

# https://github.com/docker/docker-py/issues/1502
- name: Workaround for issue - No module named ssl_match_hostname (Python 2.7)
  block:
    - name: Test if module ssl_match_hostname exists
      command: python -c "import backports.ssl_match_hostname"
      register: _docker_check_smh
      changed_when: no
      failed_when: _docker_check_smh.rc > 1
      check_mode: no

    - name: Apply workaround for issue - No module named ssl_match_hostname (Python 2.7)
      become: yes
      command: cp -r /usr/local/lib/python2.7/dist-packages/backports/ssl_match_hostname/ /usr/lib/python2.7/dist-packages/backports
      when: _docker_check_smh.rc == 1
  when:
    - docker_x_ssl_match_hostname | bool
    - not _docker_python3 | bool
    - _docker_additional_packages_pip | length > 0

- name: Workaround for issue - No module named shutil_get_terminal_size (Python 2.7)
  block:
    - name: Test if module shutil_get_terminal_size exists
      command: python -c "import backports.shutil_get_terminal_size"
      register: _docker_check_shutil
      changed_when: no
      failed_when: _docker_check_shutil.rc > 1
      check_mode: no

    - name: Apply workaround for issue - No module named shutil_get_terminal_size (Python 2.7)
      become: yes
      command: cp -r /usr/local/lib/python2.7/dist-packages/backports/shutil_get_terminal_size/ /usr/lib/python2.7/dist-packages/backports
      when: _docker_check_shutil.rc == 1
  when:
    - docker_x_shutil_get_terminal_size | bool
    - not _docker_python3 | bool
    - _docker_additional_packages_pip | length > 0

- name: Stat /usr/bin/docker-compose
  stat:
    path: /usr/bin/docker-compose
  register: _docker_compose_file
  check_mode: no

# Official installation of docker-compose (Linux): https://docs.docker.com/compose/install/#install-compose
- name: Install docker-compose without PiP
  block:
    # Not using github_release:  https://github.com/ansible/ansible/issues/45391
    - name: Get latest release of docker-compose
      uri:
        url: https://api.github.com/repos/docker/compose/releases/latest
        body_format: json
      register: _github_docker_compose
      until: _github_docker_compose.status == 200
      retries: 10
      check_mode: no
      when:
        - docker_compose_no_pip_detect_version | bool

    - name: Set detected docker-compose version
      set_fact:
        _docker_compose_version: "{{ _github_docker_compose.json.tag_name }}"
      when:
        - _github_docker_compose is defined
        - _github_docker_compose.json is defined

    - name: Set fixed docker-compose version
      set_fact:
        _docker_compose_version: "{{ docker_compose_no_pip_version }}"
      when:
        - not docker_compose_no_pip_detect_version | bool

    - name: Fetch SHA256 of docker-compose
      block:
        - name: Fetch docker-compose SHA265 sum file
          get_url:
            url: "https://github.com/docker/compose/releases/download/\
              {{ _docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}.sha256"
            dest: "/tmp/ansible.docker-compose-sha256"
          register: _github_docker_compose_shasum_file
          changed_when: false
          until: _github_docker_compose_shasum_file.status_code == 200
          retries: 10
          check_mode: no

        - name: Dump SHA256 file contents to variable
          command: cat /tmp/ansible.docker-compose-sha256
          register: _github_docker_compose_shasum
          changed_when: false
          check_mode: no

        - name: Remove temporary file for SHA256 sum
          file:
            path: "/tmp/ansible.docker-compose-sha256"
            state: absent
          changed_when: false
          check_mode: no

        - name: Set SHA256 facts related to docker-compose
          set_fact:
            _docker_compose_checksum: "sha256:{{ _github_docker_compose_shasum.stdout | \
              regex_replace('^([0-9a-zA-Z]*)[\\s\\t]+.+', '\\1') }}"

    - name: Install docker-compose {{ _docker_compose_version }} (Linux)
      become: true
      get_url:
        url: "https://github.com/docker/compose/releases/download/\
          {{ _docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
        checksum: "{{ _docker_compose_checksum }}"
        dest: /usr/local/bin/docker-compose
        mode: 0755

    - name: Create symlink for docker-compose to work with sudo in some distributions
      become: true
      file:
        src: /usr/local/bin/docker-compose
        dest: /usr/bin/docker-compose
        state: link
  when:
    - docker_compose | bool
    - docker_compose_no_pip | bool
    - not _docker_compose_file.stat.exists
